<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>(Œªblog.rainbyte)</title>
    <link href="http://rainbyte.github.io/atom.xml" rel="self" />
    <link href="http://rainbyte.github.io" />
    <id>http://rainbyte.github.io/atom.xml</id>
    <author>
        <name>rainbyte</name>
        <email>rainbyte@tuta.io</email>
    </author>
    <updated>2022-08-23T22:43:30Z</updated>
    <entry>
    <title>VSCode C# setup</title>
    <link href="http://rainbyte.github.io/posts/220824-01-vscode-csharp-setup.html" />
    <id>http://rainbyte.github.io/posts/220824-01-vscode-csharp-setup.html</id>
    <published>2022-08-23 22:43:30</published>
    <updated>2022-08-23T22:43:30Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on August 23, 2022
    
        by rainbyte
    
</div>

<div class="info">
    
        Tags: <a title="All pages tagged &#39;c#&#39;." href="/tags/c%23.html">c#</a>, <a title="All pages tagged &#39;vscode&#39;." href="/tags/vscode.html">vscode</a>
    
</div>

<p>Follow these steps to configure a C# development environment using
VSCode (Code-OSS variant) with the Free OmniSharp extension.</p>
<p>This setup has been tested on <strong>Arch Linux</strong> with the following package versions:</p>
<ul>
<li><strong>code</strong> 1.70.2-1</li>
<li><strong>dotnet-sdk</strong> 6.0.8.sdk108-1</li>
</ul>
<h2 id="step-by-step-procedure">Step-by-step procedure</h2>
<ol type="1">
<li><p>Install <code>dotnet</code> sdk and runtime</p>
<ul>
<li><p>Arch Linux setup:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span> pacman <span class="at">-S</span> dotnet-sdk</span></code></pre></div></li>
</ul></li>
<li><p>Make a directory anywhere you like. Go inside and use <code>dotnet</code> tool
to create a sample project with <code>console</code> template:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">mkdir</span> <span class="op">&lt;</span>project_name<span class="op">&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">cd</span> <span class="op">&lt;</span>project_name<span class="op">&gt;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ex">dotnet</span> new console</span></code></pre></div>
<p>Note: this folder can be deleted later, it is just an example
to test if the extension is working</p></li>
<li><p>Open the editor inside the project folder</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">code</span> .</span></code></pre></div></li>
<li><p>Install <a href="https://open-vsx.org/extension/muhammad-sammy/csharp">free-omnisharp-vscode extension</a> for C# development</p></li>
<li><p>Open <code>Program.cs</code> file</p>
<ul>
<li>Note: this step is just to force extension to download OmniSharp implementation</li>
</ul></li>
<li><p>Wait until <strong>OmniSharp</strong> dependencies get installed (it takes time)</p></li>
<li><p>If editor asks about adding <code>build &amp; run</code> targets, say <code>yes</code></p>
<ul>
<li>It can also be enabled later inside <strong>Run & Debug</strong> tab</li>
</ul></li>
<li><p>Press <code>F5</code> to build and execute the example code</p>
<ul>
<li><strong>Breakpoints</strong> are supported, add them to the left of the code</li>
<li>Open <strong>Run & Debug</strong> tab to see variables and watch expressions</li>
</ul></li>
<li><p>Now the editor is configured and new projects can be created using <code>dotnet</code> tool (like in step 2)</p></li>
</ol>
<p><code>Happy hacking!</code> üê±</p>


<div id="gh-comments-list">
    Comments are not open for this post yet.
</div>
]]></summary>
</entry>
<entry>
    <title>The HTTP Language</title>
    <link href="http://rainbyte.github.io/posts/220803-01-http-language.html" />
    <id>http://rainbyte.github.io/posts/220803-01-http-language.html</id>
    <published>2022-08-03 14:30:00</published>
    <updated>2022-08-03T14:30:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on August  3, 2022
    
        by rainbyte
    
</div>

<div class="info">
    
        Tags: <a title="All pages tagged &#39;api&#39;." href="/tags/api.html">api</a>, <a title="All pages tagged &#39;http&#39;." href="/tags/http.html">http</a>, <a title="All pages tagged &#39;request&#39;." href="/tags/request.html">request</a>, <a title="All pages tagged &#39;vscode&#39;." href="/tags/vscode.html">vscode</a>
    
</div>

<p>It is typical to see the situation where a developer has to work with services which provide an HTTP api.</p>
<p>Suppose we are implementing the following common endpoints:</p>
<ul>
<li><code>GET /todos</code>: list all the Todos</li>
<li><code>POST /todos</code>: create a new Todo</li>
<li><code>PUT /todos/:id</code>: update a Todo indicated by :id</li>
<li><code>DELETE /todos/:id</code>: remove a Todo indicated by :id</li>
</ul>
<p>After using a particular programming language to achieve the task, it is
possible that we would like to communicate with it to test it works fine.</p>
<p>There are many tools in the market which allows us to make requests, even
in a graphical point and click way, but I have found more confortable to
have a text representation.</p>
<p>There is a file format called <code>HTTP language</code> which can represent requests
in an standardized fashion and it is supported by CLI tools like <code>httpYac</code>
and editor extensions like <code>vscode-restclient</code>.</p>
<p>The <code>httpYac</code> tool can be installed using <code>npm</code> with the following command:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">npm</span> <span class="at">-g</span> install httpyac</span></code></pre></div>
<p>I wrote a few examples about how to make requests to the proposed HTTP api
using the <code>HTTP language</code> format. It can be seen in the following snippet
that the syntax is very simple and complies with IETF request line spec.</p>
<h2 id="http-language-examples">HTTP language examples</h2>
<p>We can obtain a single Todo using the <code>GET</code> verb followed by the host and
the port where server is running, the HTTP version is optional:</p>
<pre class="http"><code>GET http://localhost:4000/todos HTTP/1.1</code></pre>
<p>To create a new Todo task we can follow the example and use <code>POST</code> verb, and
in this case the <code>Content-Type</code> header should be specified, given that we
are attaching a JSON data structure as body of the request:</p>
<pre class="http"><code>POST http://localhost:4000/todos HTTP/1.1
Content-Type: application/json

{
    &quot;text&quot;: &quot;blabla&quot;,
    &quot;completed&quot;: false
}</code></pre>
<p>If we want to obtain a single Todo task then a variable could be used to
indicate the <code>:id</code>, and the value can be accessed using brackets:</p>
<pre class="http"><code>@get-todo-id = a0804e5f-a849-4920-9023-557ecdd790d1
GET http://localhost:4000/todos/{{get-todo-id}} HTTP/1.1</code></pre>
<p>To modify a Todo task we use the <code>PUT</code> verb as appears on the proposed API.
It is important to have the <code>Content-Type</code> header defined as we use JSON:</p>
<pre class="http"><code>@put-todo-id = a0804e5f-a849-4920-9023-557ecdd790d1
PUT http://localhost:4000/todos/{{put-todo-id}} HTTP/1.1
Content-Type: application/json

{
    &quot;text&quot;: &quot;foobar&quot;,
    &quot;completed&quot;: false
}</code></pre>
<p>The format can also be used with the <code>DELETE</code> verb, and in this case we use
a variable one more time, but with different name to avoid conflicts:</p>
<pre class="http"><code>@del-todo-id = a0804e5f-a849-4920-9023-557ecdd790d1
DELETE http://localhost:4000/todos/{{del-todo-id}} HTTP/1.1</code></pre>
<p>These snippets can be copied to a file with
<code>.rest</code> or <code>.http</code> extension, eg. <code>todo-requests.http</code>, and executed this way:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ex">httpyac</span> todo-requests.http</span></code></pre></div>
<p>Happy hacking! üê±</p>


<div id="gh-comments-list">
    Comments are not open for this post yet.
</div>
]]></summary>
</entry>
<entry>
    <title>Clojure libraries and dependencies</title>
    <link href="http://rainbyte.github.io/posts/220728-01-clojure-libraries-and-dependencies.html" />
    <id>http://rainbyte.github.io/posts/220728-01-clojure-libraries-and-dependencies.html</id>
    <published>2022-07-28 21:49:00</published>
    <updated>2022-07-28T21:49:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on July 28, 2022
    
        by rainbyte
    
</div>

<div class="info">
    
        Tags: <a title="All pages tagged &#39;clojure&#39;." href="/tags/clojure.html">clojure</a>
    
</div>

<p>The Clojure language provides some keywords to handle libraries in each file:</p>
<ul>
<li><code>:require</code> loads a Clojure library so it can be used in the current file or
in the REPL</li>
<li><code>:use</code> brings definitions to current namespace via aliases</li>
<li><code>:import</code> gives access to native Java classes and interfaces</li>
</ul>
<p>Note: in ClojureScript the native JavaScript code can be usually accessed using
<code>:require</code>, but sometimes <code>:import</code> is needed (eg. for Google Closure library).</p>
<h2 id="how-to-use-these-keywords">How to use these keywords</h2>
<p>Load <code>foo.bar</code> and invoke a function from that library with the
full namespace:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode clojure"><code class="sourceCode clojure"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">ns</span> user</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  (<span class="at">:require</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    [foo.bar]</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    [foo.baz]))</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>(foo.bar/a-function)</span></code></pre></div>
<p>Load a library making an alias to simplify access to a function:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode clojure"><code class="sourceCode clojure"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">ns</span> user</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  (<span class="at">:require</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    [foo.bar <span class="at">:as</span> bar]</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    [foo.baz <span class="at">:as</span> baz]))</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>(bar/a-function)</span></code></pre></div>
<p>Load with <code>:refer</code> only the definitions we are interested in:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode clojure"><code class="sourceCode clojure"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">ns</span> user</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  (<span class="at">:require</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    [foo.bar <span class="at">:refer</span> [a-function]]))</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>(a-function)</span></code></pre></div>
<p>Load with <code>:refer</code> only some definitions and also make aliases with <code>:rename</code>
for our convenience:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode clojure"><code class="sourceCode clojure"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">ns</span> user</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  (<span class="at">:require</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    [foo.bar <span class="at">:refer</span> [a-function]</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>             <span class="at">:rename</span> [a-function func]]))</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>(func)</span></code></pre></div>
<p>The <code>:use</code> keyword can be applied with <code>:only</code> to indicate which definitions
will be provided:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode clojure"><code class="sourceCode clojure"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">ns</span> user</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  (<span class="at">:use</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    [foo.bar <span class="at">:only</span> [a-function]]))</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>(a-function)</span></code></pre></div>
<p>The <code>:use</code> keyword can also be applied without <code>:only</code>, but <strong>beware! It can cause
conflicts</strong>, eg. the following snippet will have a problem if <code>foo.bar</code> and
<code>foo.baz</code> namespaces provide definitions with the same name:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode clojure"><code class="sourceCode clojure"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">ns</span> user</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  (<span class="at">:use</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    [foo.bar]   <span class="co">;; avoid :use without :only, it can cause conflicts!</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    [foo.baz]))</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>(a-function)</span></code></pre></div>
<p>Import a native Java class of <code>java.util</code> package and invoke the <code>Date.</code> method:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode clojure"><code class="sourceCode clojure"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>(<span class="kw">ns</span> user</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  (<span class="at">:import</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    (java.util Date)))</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>(Date.) <span class="co">; call a Java method to get the current date</span></span></code></pre></div>


<div id="gh-comments-list">
    Comments are not open for this post yet.
</div>
]]></summary>
</entry>
<entry>
    <title>Autenticaci√≥n en GitHub usando SSH</title>
    <link href="http://rainbyte.github.io/posts/220511-01-github-ssh-auth.html" />
    <id>http://rainbyte.github.io/posts/220511-01-github-ssh-auth.html</id>
    <published>2022-05-11 23:41:00</published>
    <updated>2022-05-11T23:41:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on May 11, 2022
    
        by rainbyte
    
</div>

<div class="info">
    
        Tags: <a title="All pages tagged &#39;git&#39;." href="/tags/git.html">git</a>, <a title="All pages tagged &#39;github&#39;." href="/tags/github.html">github</a>, <a title="All pages tagged &#39;ssh&#39;." href="/tags/ssh.html">ssh</a>
    
</div>

<p>Este post se muestra c√≥mo autenticarse en GitHub mediante llaves SSH para poder interactuar con repositorios Git.</p>
<p>SSH (Secure SHell) es un protocolo que permite acceso remoto trabajando con pares de llaves (o claves) para generar canales seguros de comunicaci√≥n.</p>
<p>El procedimiento es similar para otros proveedores de Git, como por ejemplo Bitbucket o GitLab.</p>
<h2 id="registrar-una-llave-p√∫blica">Registrar una llave p√∫blica</h2>
<p>A continuaci√≥n se explica como generar un par de llaves, una privada que es secreta, y otra p√∫blica que se registrar√° en GitHub u otro proveedor Git:</p>
<!-- more -->
<ol type="1">
<li><p>Generar el par de llaves SSH reemplazando los campos <code>&lt;email&gt;</code> y <code>&lt;llave&gt;</code> con valores apropiados</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">ssh-keygen</span> <span class="at">-t</span> ed25519 <span class="at">-C</span> <span class="op">&lt;</span>email<span class="op">&gt;</span> -f ~/.ssh/<span class="op">&lt;</span>llave<span class="op">&gt;</span></span></code></pre></div>
<p>Nota: el nombre <code>id_ed25519_github</code> podr√≠a ser adecuado para el campo
<code>&lt;llave&gt;</code>, ya que el par de llaves se cre√≥ para GitHub usando el esquema
<code>ed25519</code>.</p></li>
<li><p>Verificar que los archivos <code>~/.ssh/&lt;llave&gt;</code> y <code>~/.ssh/&lt;llave&gt;.pub</code> existen, siendo el de extensi√≥n <code>.pub</code> la llave p√∫blica (eso significa que puede mostrarse a 3ros sin preocupaciones)</p></li>
<li><p>Abrir el archivo <code>~/.ssh/config</code> con un editor de texto, crearlo si no existe, y dependiendo del sistema operativo agregarle lo siguiente para cada caso:</p>
<p>Sistema Linux:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>Host github.com</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  IdentityFile ~/.ssh/&lt;llave&gt;</span></code></pre></div>
<p>Sistema macOS:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>Host github.com</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  AddKeysToAgent yes</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  UseKeychain    yes</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  IdentityFile   ~/.ssh/&lt;llave&gt;</span></code></pre></div></li>
<li><p>Agregar la llave privada para que el programa <code>ssh-agent</code> las recuerde</p>
<p>Sistema Linux:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="fu">ssh-add</span> ~/.ssh/<span class="op">&lt;</span>llave<span class="op">&gt;</span></span></code></pre></div>
<p>Sistema macOS:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="fu">ssh-add</span> <span class="at">-K</span> ~/.ssh/<span class="op">&lt;</span>llave<span class="op">&gt;</span></span></code></pre></div></li>
<li><p>Agregar la llave p√∫blica a GitHub (esto deber√≠a ser similar para otros proveedores de repositorios Git)</p>
<ol type="1">
<li>Ir a <code>Settings</code> en el men√∫ superior derecho</li>
<li>Abrir <code>SSH and GPG keys</code> en la columna izquierda</li>
<li>Clickear el bot√≥n <code>New SSH Key</code></li>
<li>Llenar el campo <code>Title</code> a gusto con un nombre representativo</li>
<li>Ejecutar el comando <code>cat ~/.ssh/&lt;llave&gt;.pub</code> (¬°atenci√≥n! extensi√≥n <code>.pub</code>), copiar el resultado y pegarlo en el campo <code>Key</code></li>
<li>Clickear el bot√≥n <code>Save SSH Key</code></li>
</ol></li>
</ol>
<h2 id="repositorios-locales">Repositorios locales</h2>
<p>Al abrir un repositorio en GitHub se puede obtener la url para clonarlo, para ello debe hacerse click en el bot√≥n verde que dice <code>Code ‚ñº</code>, y luego abrir la pesta√±a SSH.</p>
<p>Una direcci√≥n url SSH tiene la forma <code>git@github.com:&lt;usuario&gt;/&lt;repositorio&gt;.git</code>,
y ese repositorio remoto puede clonarse de la siguiente manera:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="fu">git</span> clone <span class="op">&lt;</span>url<span class="op">&gt;</span></span></code></pre></div>
<p>En caso de tener un repositorio previamente clonado desde un remoto llamado <code>origin</code> (es lo habitual), es posible cambiar su url as√≠:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="fu">git</span> remote set-url origin <span class="op">&lt;</span>url<span class="op">&gt;</span></span></code></pre></div>
<p>En ambos casos, y asumiendo que el remoto se llama <code>origin</code>, se puede verificar
la url del mismo con este comando:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="fu">git</span> remote get-url origin <span class="op">&lt;</span>url<span class="op">&gt;</span></span></code></pre></div>


<div id="gh-comments-list">
    Comments are not open for this post yet.
</div>
]]></summary>
</entry>
<entry>
    <title>Android folder backup via Rsync</title>
    <link href="http://rainbyte.github.io/posts/220501-01-android-rsync-backup.html" />
    <id>http://rainbyte.github.io/posts/220501-01-android-rsync-backup.html</id>
    <published>2022-05-01 23:41:00</published>
    <updated>2022-05-01T23:41:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on May  1, 2022
    
        by rainbyte
    
</div>

<div class="info">
    
        Tags: <a title="All pages tagged &#39;android&#39;." href="/tags/android.html">android</a>, <a title="All pages tagged &#39;backup&#39;." href="/tags/backup.html">backup</a>, <a title="All pages tagged &#39;rsync&#39;." href="/tags/rsync.html">rsync</a>
    
</div>

<p>This post describes how to backup a folder from an Android phone to a PC and restore it on a 2nd phone.</p>
<h2 id="backup-procedure">Backup procedure</h2>
<ol type="1">
<li><p>Download simplesshd on the 1st phone (<a href="https://play.google.com/store/apps/details?id=org.galexander.sshd">play store</a> link)</p></li>
<li><p>Open simplesshd and click <code>start</code>. The log will show some relevant information:</p>
<ul>
<li>host: something like ip <strong>192.168.x.y</strong></li>
<li>port: default is <strong>2222</strong></li>
</ul></li>
<li><p>Run rsync backup command on the PC. Replace <code>&lt;host&gt;</code> and <code>&lt;port&gt;</code> with the correct values for 1st phone!</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">rsync</span> <span class="at">-auv</span> <span class="at">--delete</span> <span class="at">-e</span> <span class="st">&#39;ssh -p &lt;port&gt;&#39;</span> <span class="op">&lt;</span>host<span class="op">&gt;</span>:<span class="st">&#39;/sdcard/orig-dir/&#39;</span> <span class="st">&#39;/path/to/backup-dir/&#39;</span></span></code></pre></div>
<ul>
<li>Rsync will copy files from 1st phone <code>orig-dir</code> folder to PC <code>backup-dir</code> folder</li>
<li><code>delete</code> removes from PC folder the files not in the 1st phone</li>
<li><u>Note</u>: final <code>/</code> on each folder are required!</li>
</ul></li>
</ol>
<h2 id="restore-procedure">Restore procedure</h2>
<ol type="1">
<li><p>Download simplesshd on the 2nd phone (<a href="https://play.google.com/store/apps/details?id=org.galexander.sshd">play store</a> link)</p></li>
<li><p>Open simplesshd and click <code>start</code>. The log will show some relevant information:</p>
<ul>
<li>host: something like ip <strong>192.168.x.y</strong></li>
<li>port: default is <strong>2222</strong></li>
</ul></li>
<li><p>Run rsync restore command on the PC. Replace <code>&lt;host&gt;</code> and <code>&lt;port&gt;</code> with the correct values for 2nd phone!</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">rsync</span> <span class="at">-uv</span> <span class="at">--omit-dir-times</span> <span class="at">--no-perms</span> <span class="at">--recursive</span> <span class="at">--inplace</span> <span class="at">--delete</span> <span class="at">-e</span> <span class="st">&#39;ssh -p &lt;port&gt;&#39;</span> <span class="st">&#39;/path/to/backup-dir/&#39;</span> <span class="op">&lt;</span>host<span class="op">&gt;</span>:<span class="st">&#39;/sdcard/dest-dir/&#39;</span></span></code></pre></div>
<ul>
<li>Rsync will copy files from PC <code>backup-dir</code> folder to 2nd phone <code>dest-dir</code> folder</li>
<li><code>inplace</code> avoids double sdcard write (caused by copy and rename)</li>
<li><code>no-perms</code> is useful when perms are not supported, eg.: mtp mounts</li>
<li><code>omit-dir-times</code> ignores timestamps</li>
<li><code>delete</code> removes from 2nd phone folder the files not in the PC folder</li>
<li><u>Note</u>: final <code>/</code> on each folder are required!</li>
</ul></li>
</ol>


<div id="gh-comments-list">
    Comments are not open for this post yet.
</div>
]]></summary>
</entry>
<entry>
    <title>Haskell from 0 to IO (Maybe Hero)</title>
    <link href="http://rainbyte.github.io/posts/200828-01-haskell-0-to-io.html" />
    <id>http://rainbyte.github.io/posts/200828-01-haskell-0-to-io.html</id>
    <published>2020-08-28 03:56:00</published>
    <updated>2020-08-29 06:42:00</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on August 28, 2020
    
        by rainbyte
    
</div>

<div class="info">
    
        Tags: <a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html">haskell</a>, <a title="All pages tagged &#39;io&#39;." href="/tags/io.html">io</a>, <a title="All pages tagged &#39;monad&#39;." href="/tags/monad.html">monad</a>, <a title="All pages tagged &#39;typeclasses&#39;." href="/tags/typeclasses.html">typeclasses</a>
    
</div>

<h2 id="introduction">Introduction</h2>
<p>This guide references some syntax and patterns used when writing programs
in the Haskell language. A text editor and the GHC compiler are required
to run the code, but online environments are also an option.</p>
<h2 id="minimal-example">Minimal example</h2>
<p>Haskell expects programs have an entrypoint called <code>main</code>, which later is
explained in detail, but for now we will create a file named <code>Program.hs</code>
and write inside the following code:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Comments are written like this</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> <span class="st">&quot;hola&quot;</span></span></code></pre></div>
<p>Check if code can be interpreted:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">runghc</span> Program.hs</span></code></pre></div>
<p>Check if code can be compiled and executed:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">ghc</span> <span class="at">-o</span> Program Program.hs</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ex">./Program</span></span></code></pre></div>
<p>Some system also require to add the <code>-dynamic</code> option (eg. Arch Linux).</p>
<h2 id="definitions">Definitions</h2>
<p>Haskell definitions indicate a type with <code>::</code> and their value with <code>=</code>.</p>
<p>Here <code>num</code> is defined with type <code>Int</code> and value <code>9</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">num ::</span> <span class="dt">Int</span> <span class="co">-- type</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>num <span class="ot">=</span> <span class="dv">9</span>    <span class="co">-- definition</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> num</span></code></pre></div>
<p>The <code>=</code> symbol means equality in both ways, this means that <code>num</code> can be
replaced by <code>9</code> anywhere.</p>
<p>Detailed definitions are done using <code>let..in..</code>, which has a <code>let</code> section
with local values accessed by the <code>in</code> section to calculate a final value.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>num <span class="ot">=</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> x <span class="ot">=</span> <span class="dv">5</span>  <span class="co">-- define x</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>        y <span class="ot">=</span> <span class="dv">10</span> <span class="co">-- define y</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span> x <span class="op">+</span> y   <span class="co">-- use them</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> num</span></code></pre></div>
<p>Other way to have local definitions is to attach a <code>where</code> section, the
following code is equivalent to the previous one:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>num <span class="ot">=</span> x <span class="op">+</span> y <span class="co">-- use definitions</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    x <span class="ot">=</span> <span class="dv">5</span>  <span class="co">-- define x</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    y <span class="ot">=</span> <span class="dv">10</span> <span class="co">-- define y</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> num</span></code></pre></div>
<h2 id="types">Types</h2>
<p>Carefully designed types reject unwanted values by making them unrepresentable.</p>
<p>The <code>type</code> keyword indicates an alias to an existing type.</p>
<p>Here <code>String</code> is an alias to a list of <code>Char</code>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">String</span> <span class="ot">=</span> [<span class="dt">Char</span>]</span></code></pre></div>
<p>The <code>data</code> keyword is used to define custom types.</p>
<p>Booleans are represented in this way:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Bool</span> <span class="ot">=</span> <span class="dt">False</span> <span class="op">|</span> <span class="dt">True</span></span></code></pre></div>
<p>We can apply conditionals over booleans like this:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">b ::</span> <span class="dt">Bool</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>b <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="ot">s ::</span> <span class="dt">String</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>s <span class="ot">=</span> <span class="kw">if</span> b <span class="kw">then</span> <span class="st">&quot;True&quot;</span> <span class="kw">else</span> <span class="st">&quot;False&quot;</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> s</span></code></pre></div>
<p>The <code>Ordering</code> type is used to compare things:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Ordering</span> <span class="ot">=</span> <span class="dt">LT</span> <span class="op">|</span> <span class="dt">EQ</span> <span class="op">|</span> <span class="dt">GT</span></span></code></pre></div>
<p>Handling each possible case for a type is called <code>pattern matching</code>, and
ideally all of them should be handled</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="fu">ord</span><span class="ot"> ::</span> <span class="dt">Ordering</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="fu">ord</span> <span class="ot">=</span> <span class="dt">LT</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="ot">s ::</span> <span class="dt">String</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>s <span class="ot">=</span> <span class="kw">case</span> <span class="fu">ord</span> <span class="kw">of</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">LT</span> <span class="ot">-&gt;</span> <span class="st">&quot;Less Than&quot;</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">EQ</span> <span class="ot">-&gt;</span> <span class="st">&quot;Equal&quot;</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">GT</span> <span class="ot">-&gt;</span> <span class="st">&quot;Greater Than&quot;</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> s</span></code></pre></div>
<p>The <code>Maybe</code> type is parametrized and represents the existence of something with
a generic type <code>t</code>, avoiding the use of <code>null</code> at all.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Maybe</span> t <span class="ot">=</span> <span class="dt">Nothing</span> <span class="op">|</span> <span class="dt">Just</span> t</span></code></pre></div>
<p><code>Pattern matching</code> also works with parametrized types:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ot">mInt ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>mInt <span class="ot">=</span> <span class="dt">Just</span> <span class="dv">9</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="ot">num ::</span> <span class="dt">Int</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>num <span class="ot">=</span> <span class="kw">case</span> mInt <span class="kw">of</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Just</span> n  <span class="ot">-&gt;</span> n</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dv">0</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> num</span></code></pre></div>
<p>The <code>Either</code> type has 2 parameters and represents the existence of a value with
type <code>e</code> or a value with type <code>t</code>.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Either</span> e t <span class="ot">=</span> <span class="dt">Left</span> e <span class="op">|</span> <span class="dt">Right</span> t</span></code></pre></div>
<p>We can use <code>Either String t</code> to represent an error message when a result of
type <code>t</code> cannot be obtained.</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="ot">err ::</span> <span class="dt">Either</span> <span class="dt">String</span> <span class="dt">Int</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>err <span class="ot">=</span> <span class="dt">Left</span> <span class="st">&quot;Could not obtain the number&quot;</span></span></code></pre></div>
<h2 id="functions">Functions</h2>
<p>When we see an arrow <code>-&gt;</code> in a type, we know it is a function.</p>
<p>Every function receives an <code>a</code> and gives a <code>b</code> as result.</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ot">f ::</span> a <span class="ot">-&gt;</span> b</span></code></pre></div>
<p>Functions indicate their body with <code>=</code>.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>f x <span class="ot">=</span> x <span class="op">+</span> <span class="dv">3</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> (f <span class="dv">5</span>)</span></code></pre></div>
<p>The same function can be implemented inline as a lambda</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>f <span class="ot">=</span> \x <span class="ot">-&gt;</span> x <span class="op">+</span> <span class="dv">3</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> (f <span class="dv">5</span>)</span></code></pre></div>
<p>We can ‚Äúcombine‚Äù functions using the <code>.</code> operator, called <code>composition</code>, so
that if we have <code>g . f</code> then <code>f</code> will produce an intermediate result to be
taken by <code>g</code> to produce a final result:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>f x <span class="ot">=</span> x <span class="op">+</span> <span class="dv">3</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a><span class="ot">g ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>g x <span class="ot">=</span> x <span class="op">*</span> <span class="dv">5</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a><span class="ot">h ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a>h <span class="ot">=</span> g <span class="op">.</span> f <span class="co">-- be careful with the order</span></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> (h <span class="dv">2</span>)</span></code></pre></div>
<p>There is also an <code>$</code> operator, called ‚Äúapplication‚Äù, usually used to change
precedence and avoid extra parenthesis. You can think of it as having
parenthesis at both sides.</p>
<p>Here we have equivalent <code>main</code> implementations, choose the one you prefer.</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>f x <span class="ot">=</span> x <span class="op">+</span> <span class="dv">1</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- all of these are equivalent</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>main1 <span class="ot">=</span> <span class="fu">print</span> <span class="op">.</span> f <span class="op">$</span> <span class="dv">3</span> <span class="op">+</span> <span class="dv">4</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a>main2 <span class="ot">=</span> (<span class="fu">print</span> <span class="op">.</span> f) <span class="op">$</span> (<span class="dv">3</span> <span class="op">+</span> <span class="dv">4</span>)</span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a>main3 <span class="ot">=</span> (<span class="fu">print</span> <span class="op">.</span> f) (<span class="dv">3</span> <span class="op">+</span> <span class="dv">4</span>)</span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>main4 <span class="ot">=</span> <span class="fu">print</span> (f (<span class="dv">3</span> <span class="op">+</span> <span class="dv">4</span>))</span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> main1</span></code></pre></div>
<p>A function can give a function as result and we can use this mechanism
to make new definitions:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>)</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>f x <span class="ot">=</span> \y <span class="ot">-&gt;</span> x <span class="op">+</span> y</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>add5 <span class="ot">=</span> f <span class="dv">5</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> (add5 <span class="dv">6</span>)</span></code></pre></div>
<p>Parenthesis in that type signature can be omitted, and we can also evaluate
the <code>f</code> function with all the parameters at once:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>f x <span class="ot">=</span> \y <span class="ot">-&gt;</span> x <span class="op">+</span> y</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> (f <span class="dv">5</span> <span class="dv">6</span>)</span></code></pre></div>
<p>We can also move the <code>y</code> parameter to the left side, just to make it easier
to read:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>f x y <span class="ot">=</span> x <span class="op">+</span> y</span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> (f <span class="dv">5</span> <span class="dv">6</span>)</span></code></pre></div>
<p>A function can receive a function as parameter, but then those parenthesis
are required to maintain precedence. We don‚Äôt know what the <code>h</code> function
does, but we know it can be used over an <code>Int</code> like <code>3</code>.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="ot">g ::</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>g h <span class="ot">=</span> h <span class="dv">3</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>f x <span class="ot">=</span> x <span class="op">+</span> <span class="dv">2</span></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> (g f) <span class="co">-- g consumes f function</span></span></code></pre></div>
<p><code>Pattern matching</code> can also be used to define a function piece-by-piece</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fib ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>fib <span class="dv">0</span> <span class="ot">=</span> <span class="dv">0</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>fib <span class="dv">1</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>fib x <span class="ot">=</span> fib (x <span class="op">-</span> <span class="dv">1</span>) <span class="op">+</span> fib (x <span class="op">-</span> <span class="dv">2</span>)</span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> (fib <span class="dv">10</span>)</span></code></pre></div>
<h2 id="typeclasses">Typeclasses</h2>
<p>When types are generic, function body can only use known operations.</p>
<p>Here type <code>a</code> could be any type, so <code>x</code> can only be returned as-is.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="ot">id&#39; ::</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>id&#39; x <span class="ot">=</span> x</span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> (id&#39; <span class="dv">5</span>)</span></code></pre></div>
<p>We can define a set of operations, then types could implement them,
that is called <code>typeclass</code>.</p>
<p>As example a type which fulfils the <code>Eq</code> typeclass will have all its
functions available.</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Eq</span> a <span class="kw">where</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    (==) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a><span class="ot">    (/=) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a>    (<span class="op">/=</span>) x y <span class="ot">=</span> <span class="fu">not</span> (x <span class="op">==</span> y)</span></code></pre></div>
<p>We can see that <code>Ord</code> needs <code>b</code> to implement <code>Eq</code>, because it needs
operations from that set.</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Eq</span> b <span class="ot">=&gt;</span> <span class="dt">Ord</span> b <span class="kw">where</span></span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    compare              ::</span> b <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> <span class="dt">Ordering</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>    (<span class="op">&lt;</span>), (<span class="op">&lt;=</span>), (<span class="op">&gt;=</span>),<span class="ot"> (&gt;) ::</span> b <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">max</span>,<span class="ot"> min             ::</span> b <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b</span></code></pre></div>
<p>Typeclass implementation is done via instances for each type.</p>
<p>Here we define <code>Eq</code> for the <code>Bool</code> type.</p>
<p>Remember that <code>(/=)</code> is already defined based on <code>(==)</code>.</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Eq</span> <span class="dt">Bool</span> <span class="kw">where</span></span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a>    (<span class="op">==</span>) <span class="dt">True</span>  <span class="dt">True</span>  <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>    (<span class="op">==</span>) <span class="dt">False</span> <span class="dt">False</span> <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>    (<span class="op">==</span>) _     _     <span class="ot">=</span> <span class="dt">False</span></span></code></pre></div>
<p>The type <code>t</code> implements <code>Ord</code> and <code>Num</code> typeclasses, so inside <code>isPositive</code>
we can use number and comparison operations over <code>x</code> value.</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="ot">isPositive ::</span> (<span class="dt">Ord</span> t, <span class="dt">Num</span> t) <span class="ot">=&gt;</span> t <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a>isPositive x <span class="ot">=</span> <span class="fu">compare</span> <span class="dv">0</span> x</span></code></pre></div>
<h2 id="inputoutput">Input/Output</h2>
<p>Now we are ready to inspect the type of the <code>main</code> function we wrote at the
beginning.</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> <span class="st">&quot;hola&quot;</span></span></code></pre></div>
<p>The <code>IO a</code> type represents a set of instructions that will be executed
by the runtime of Haskell, with something of type <code>a</code> as result.</p>
<p>In the case of main <code>a</code> is <code>()</code>, which is called <strong>unit</strong>, and its only
possible value is <code>()</code>.</p>
<p>This means that the <code>main</code> function produces a set of instructions to be
executed by the runtime when the program is launched.</p>
<p>We know that <code>print "hola"</code> type is also <code>IO ()</code> because it should have
the same type that <code>main</code> has to be valid code, and we also know that
<code>"hola"</code> is a <code>String</code>.</p>
<p>We could think that <code>print :: String -&gt; IO ()</code>, but we have been using
<code>print</code> with things of other types too, so its type should be something
like <code>C a =&gt; a -&gt; IO ()</code> with some unknown constraint C.</p>
<p>That constraint is the <code>Show</code> typeclass we can see here:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Show</span> a <span class="kw">where</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    show ::</span> a <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- plus other definitions</span></span></code></pre></div>
<p>Given that <code>show</code> function takes something and produces a <code>String</code>, then
that function is the missing piece.</p>
<p>Then we can infer that <code>print</code> type is <code>Show a =&gt; a -&gt; IO ()</code>, so <code>a</code>
is converted to an <code>String</code> which is printed.</p>
<p>This is the definition of the <code>print</code> function:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span><span class="ot"> ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a><span class="fu">print</span> x <span class="ot">=</span> <span class="fu">putStrLn</span> (<span class="fu">show</span> x)</span></code></pre></div>
<p>As we can see, it uses <code>show</code> to obtain an <code>String</code>, which will be consumed
by the <code>putStrLn</code> function, and that is the one that has the <code>String -&gt; IO ()</code>
type we thought before.</p>
<p>We will see soon how to write bigger programs using <code>IO a</code> type, but first
we should talk a bit more about typeclasses.</p>
<h2 id="typeclass-laws">Typeclass Laws</h2>
<p>Some typeclasses define a set of associated laws which cannot be checked
by the compiler, but the code must follow them to preserve the logic.</p>
<p>Haskell relies on developers to check that their code adheres to the laws,
which could be done via mathematical proofs, but there are also tools to
generate informal tests to check properties (eg. QuickCheck).</p>
<p>We can take as example the <code>Eq</code> typeclass we saw before:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Eq</span> a <span class="kw">where</span></span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    (==) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true" tabindex="-1"></a><span class="ot">    (/=) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span></code></pre></div>
<p>A valid <code>Eq</code> implementation should follow these laws:</p>
<ul>
<li>Reflexivity: <code>x == x = True</code></li>
<li>Symmetry: <code>x == y = y == x</code></li>
<li>Transitivity: if <code>x == y &amp;&amp; y == z = True</code>, then <code>x == z = True</code></li>
<li>Substitution: if <code>x == y = True</code>, then <code>f x == f y = True</code></li>
<li>Negation: <code>x /= y = not (x == y)</code></li>
</ul>
<p>We can see that our previous <code>Eq Bool</code> instance follows <em>reflexivity</em> law,
because by definition agrees with <code>x == x</code> form:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a>(<span class="op">==</span>) <span class="dt">True</span>  <span class="dt">True</span>  <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a>(<span class="op">==</span>) <span class="dt">False</span> <span class="dt">False</span> <span class="ot">=</span> <span class="dt">True</span></span></code></pre></div>
<p>Given that our implementation is valid, we can always replace <code>x == x</code>
with <code>True</code> when we see it, which is useful to simplify our code.</p>
<p>Typeclass laws help us to refactor the code and make it better using known
properties.</p>
<h2 id="typeclass-examples">Typeclass Examples</h2>
<p>There are many typeclasses defined in the Haskell libraries, the <a href="https://wiki.haskell.org/Typeclassopedia">Typeclassopedia</a> is a good place to start learning more details
about the standard typeclasses, but I will mention here some of the most common
ones and their laws, just as reference, there is no need to memorize them now
because they will become familiar as time passes.</p>
<ol type="1">
<li><p><strong>Semigroup Typeclass</strong></p>
<p>Types which fulfil <code>Semigroup</code> api should implement <code>(&lt;&gt;)</code> function, also
called <code>append</code>.</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Semigroup</span> a <span class="kw">where</span></span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    (&lt;&gt;) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- other definitions...</span></span></code></pre></div>
<p>The following property, called <strong>associativity</strong>, should be true for
any valid <code>Semigroup</code> instance:</p>
<ul>
<li><code>(x &lt;&gt; y) &lt;&gt; z = x &lt;&gt; (y &lt;&gt; z)</code></li>
</ul>
<p>We can use <code>(&lt;&gt;)</code> function to take to things of the same type and produce
a combined result also of the same type.</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a>s1 <span class="ot">=</span> <span class="st">&quot;hola&quot;</span></span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true" tabindex="-1"></a>s2 <span class="ot">=</span> <span class="st">&quot;mundo&quot;</span></span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-4"><a href="#cb37-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> (s1 <span class="op">&lt;&gt;</span> s2)</span></code></pre></div>
<p>Each <code>Semigroup</code> instance defines how those things are combined, in this
case <code>String</code> concatenation occurs.</p></li>
<li><p><strong>Functor Typeclass</strong></p>
<p>Types which fulfil <code>Functor</code> api implement <code>fmap</code> function.</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Functor</span> t <span class="kw">where</span></span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    fmap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> t b</span>
<span id="cb38-3"><a href="#cb38-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- other definitions...</span></span></code></pre></div>
<p>The following properties should be true for any valid <code>Functor</code> instance:</p>
<ul>
<li><code>fmap id  ==  id</code></li>
<li><code>fmap (f . g)  ==  fmap f . fmap g</code></li>
</ul>
<p>We can use <code>fmap</code> over a parametrized type <code>t a</code> to apply a function
<code>a -&gt; b</code> which takes things of type <code>a</code> to produce things of type <code>b</code>.</p>
<p>Here <code>fmap</code> is applied over a parametrized <code>List Int</code> to apply <code>f</code> function
which will add 3 to each integer inside the list, obtaining a new list with
the same shape but new values.</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="ot">xs ::</span> [<span class="dt">Int</span>]</span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true" tabindex="-1"></a>xs <span class="ot">=</span> [<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>]</span>
<span id="cb39-3"><a href="#cb39-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-4"><a href="#cb39-4" aria-hidden="true" tabindex="-1"></a><span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb39-5"><a href="#cb39-5" aria-hidden="true" tabindex="-1"></a>f x <span class="ot">=</span> x <span class="op">+</span> <span class="dv">3</span></span>
<span id="cb39-6"><a href="#cb39-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-7"><a href="#cb39-7" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> (<span class="fu">fmap</span> f xs)</span></code></pre></div>
<p>Remember, <code>fmap</code> behavior depends on the specific parametrized type we are
working with, eg. in the case of data structures usually allows us to apply
a function over each element preserving the structure shape.</p></li>
<li><p><strong>Applicative Typeclass</strong></p>
<p>Types which fulfil <code>Applicative</code> api should implement the required functions
(ie. <code>pure</code>, <code>(&lt;*&gt;)</code>, etc) and must have a <code>Functor</code> instance as well, so
the <code>fmap</code> function will be available as well.</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Functor</span> t <span class="ot">=&gt;</span> <span class="dt">Applicative</span> t <span class="kw">where</span></span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    pure ::</span> a <span class="ot">-&gt;</span> t a</span>
<span id="cb40-3"><a href="#cb40-3" aria-hidden="true" tabindex="-1"></a><span class="ot">    (&lt;*&gt;) ::</span> t (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> t b</span>
<span id="cb40-4"><a href="#cb40-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- other definitions...</span></span></code></pre></div>
<p>The following properties should be true for any <code>Applicative</code> instance:</p>
<ul>
<li><code>pure id &lt;*&gt; v = v</code></li>
<li><code>pure (.) &lt;*&gt; u &lt;*&gt; v &lt;*&gt; w = u &lt;*&gt; (v &lt;*&gt; w)</code></li>
<li><code>pure f &lt;*&gt; pure x = pure (f x)</code></li>
<li><code>u &lt;*&gt; pure y = pure ($ y) &lt;*&gt; u</code></li>
</ul>
<p>The <code>pure</code> function is really useful when working with a parametrized type
<code>t a</code> (eg. <code>IO a</code>, <code>Maybe a</code>, etc) because it allows us to take something
of type <code>a</code> and generate a value of type <code>t a</code> in a predefined way.</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">pure</span> ()</span></code></pre></div>
<p>This example shows a program which does nothing, but it is interesting
anyway because we can see how <code>pure</code> obtains a <code>IO a</code> from an <code>a</code>, which
in this case is the unit type.</p></li>
<li><p><strong>Monad Typeclass</strong></p>
<p>Any type which implements <code>Monad</code> will have a <code>(&gt;&gt;=)</code> operation, called
<code>bind</code>, it should also implement <code>Applicative</code> and <code>Functor</code> api as well,
so we also have the <code>pure</code> and <code>fmap</code> functions available for <code>Monad</code>
instances.</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Applicative</span> m <span class="ot">=&gt;</span> <span class="dt">Monad</span> m <span class="kw">where</span></span>
<span id="cb42-2"><a href="#cb42-2" aria-hidden="true" tabindex="-1"></a><span class="ot">    (&gt;&gt;=) ::</span> m a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> m b) <span class="ot">-&gt;</span> m b</span>
<span id="cb42-3"><a href="#cb42-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- other definitions...</span></span></code></pre></div>
<p>When we see <code>mf &gt;&gt;= k</code> we know <code>k</code> consumes something of type <code>a</code> obtained
from <code>mf</code> (because <code>mf :: m a</code> and <code>k :: (a -&gt; m b)</code>), so we can say <code>k</code> is
a <strong>continuation</strong>, because it could be the next piece to be executed.</p>
<p>Keep in mind that the following properties are required for any valid
<code>Monad</code> instance:</p>
<ul>
<li><code>pure a &gt;&gt;= k  =  k a</code></li>
<li><code>mf &gt;&gt;= pure = mf</code></li>
<li><code>mf &gt;&gt;= (\x -&gt; k x &gt;&gt;= h)  =  (mf &gt;&gt;= k) &gt;&gt;= h</code></li>
</ul>
<p>The <code>&gt;&gt;=</code> function is useful when we have something of a parametrized type
<code>t a</code> and we want to process the values of type <code>a</code> with the condition that
in the end we should produce something of type <code>t b</code>.</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true" tabindex="-1"></a><span class="ot">f ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true" tabindex="-1"></a>f n <span class="ot">=</span> <span class="st">&quot;n = &quot;</span> <span class="op">&lt;&gt;</span> <span class="fu">show</span> n</span>
<span id="cb43-3"><a href="#cb43-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-4"><a href="#cb43-4" aria-hidden="true" tabindex="-1"></a><span class="ot">mInt ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span></span>
<span id="cb43-5"><a href="#cb43-5" aria-hidden="true" tabindex="-1"></a>mInt <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb43-6"><a href="#cb43-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-7"><a href="#cb43-7" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> (mInt <span class="op">&gt;&gt;=</span> (<span class="fu">pure</span> <span class="op">.</span> f))</span></code></pre></div>
<p>In the example we have <code>mInt</code> of type <code>Maybe Int</code> and we would like to
process that <code>Int</code> with the function <code>f</code> to obtain an <code>String</code>, so we
use the bind function <code>&gt;&gt;=</code> to do handle this and give <code>pure . f</code> as
continuation, so it conforms with the expected type <code>Int -&gt; Maybe String</code>.</p>
<p>The parametrized type <code>Maybe a</code> has a bind implementation which is
intelligent enough to note that the <code>a</code> (ie. <code>Int</code>) doesn‚Äôt exist,
because <code>mInt</code> value is <code>Nothing</code>, so bind avoids calling <code>pure . f</code>
as the continuation expects the <code>Int</code> to be there.</p>
<p>We can se that <code>pure . f</code> uses <code>pure</code> to conform with <code>Int -&gt; Maybe Int</code>
type, and it could have consumed an <code>Int</code> if <code>mInt</code> had it
(eg. <code>mInt = Just 4</code>).</p>
<p>As we can see, bind mechanism and meaning are related to the parametrized
type which implements the <code>Monad</code> instance, so we need to understand that
type very well before learning about the inner working of a certain
typeclass instance.</p></li>
</ol>
<h2 id="do-notation">Do-notation</h2>
<p>Finally, as promised, we can see how to write bigger programs using <code>IO a</code>
type.</p>
<p>First we can see a piece of code which uses <code>(&gt;&gt;=)</code> operator to obtain a
<code>String</code> written by the user and then prints it to the console.</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">getLine</span> <span class="op">&gt;&gt;=</span> <span class="fu">putStrLn</span></span></code></pre></div>
<p>We can rewrite it using an explicit parameter named <code>line</code>, which is produced
by <code>getLine</code> subroutine and passed to the continuation (remember that when we
see something like <code>mf &gt;&gt;= k</code>, then <code>k</code> is the continuation).</p>
<div class="sourceCode" id="cb45"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb45-1"><a href="#cb45-1" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">getLine</span> <span class="op">&gt;&gt;=</span> (\line <span class="ot">-&gt;</span> <span class="fu">putStrLn</span> line)</span></code></pre></div>
<p>As this gets tiring really quickly, Haskell defines a special syntax called
<code>do-notation</code>, which we can use to write equivalent code in a more familiar
style.</p>
<p>Like in 2nd example <code>getLine</code> result is available as <code>line</code> value.</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb46-1"><a href="#cb46-1" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb46-2"><a href="#cb46-2" aria-hidden="true" tabindex="-1"></a>    line <span class="ot">&lt;-</span> <span class="fu">getLine</span></span>
<span id="cb46-3"><a href="#cb46-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">putStrLn</span> line</span></code></pre></div>
<p>As a final example we have an imperative-style program which asks the user
for an input and then iterates over the elements of a list printing the
user input each time.</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Control.Monad</span> (forM_)</span>
<span id="cb47-2"><a href="#cb47-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb47-3"><a href="#cb47-3" aria-hidden="true" tabindex="-1"></a>xs <span class="ot">=</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">10</span>]</span>
<span id="cb47-4"><a href="#cb47-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb47-5"><a href="#cb47-5" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb47-6"><a href="#cb47-6" aria-hidden="true" tabindex="-1"></a>    line <span class="ot">&lt;-</span> <span class="fu">getLine</span></span>
<span id="cb47-7"><a href="#cb47-7" aria-hidden="true" tabindex="-1"></a>    forM_ xs <span class="op">$</span> \x <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb47-8"><a href="#cb47-8" aria-hidden="true" tabindex="-1"></a>        <span class="fu">putStrLn</span> (line <span class="op">&lt;&gt;</span> <span class="fu">show</span> x)</span></code></pre></div>
<p>There are other ways to write this program, but this can feel familiar to
programmers which already know other languages.</p>


<div id="gh-comments-list">
</div>

<script type="text/javascript">
    // This is a self executing function
    var issueId = 6;
    var url = "https://github.com/rainbyte/rainbyte.github.io/issues/" + issueId;
    var api_url = "https://api.github.com/repos/rainbyte/rainbyte.github.io/issues/" + issueId + "/comments";
    (function() {
        // DOM is already available, now we can handle page elements
        var ghCommentsList = document.getElementById("gh-comments-list");

        var request = new XMLHttpRequest();
        request.open('GET', api_url, true);
        request.onload = function() {
            if (request.status >= 200 && request.status < 400) {
                // Request was successful, we can process the raw comments
                var comments = JSON.parse(request.responseText);
                var fragment = document.createDocumentFragment();
                var range = new Range();

                // Render comments section header
                fragment.appendChild(range.createContextualFragment(`
                    <div>
                        <b>Comments section</b> (visit the <b><a href='${url}'>issue</a></b> of this post to add one)
                    </div>
                `));

                // Render view of each comment
                comments.forEach(comment => {
                    var date = new Date(comment.created_at);
                    var renderedComment = range.createContextualFragment(`
                        <div class='gh-comment'>
                            <div class='gh-comment-header'>
                                <img src='${comment.user.avatar_url}'>
                                <div>
                                    <b><a href='${comment.user.html_url}'>${comment.user.login}</a></b> posted at <em>${date.toDateString()}</em>
                                </div>
                            </div>
                            <div class='gh-comment-body'>
                                ${comment.body}
                            </div>
                        </div>
                    `);
                    fragment.appendChild(renderedComment);
                });

                // Make changes visible by adding rendered nodes
                ghCommentsList.append(fragment);
            } else {
                // Request reached the target server, but it returned an error
                ghCommentsList.append("Comments are not available now.");
            }
        };
        request.onerror = function() {
            // There was a connection error of some sort
            ghCommentsList.append("Comments are not available now.");
        };
        request.send();
    })();
</script>
]]></summary>
</entry>
<entry>
    <title>Using Kotlin coroutines to handle blocking computations in Android</title>
    <link href="http://rainbyte.github.io/posts/200518-01-kotlin-coroutines-android.html" />
    <id>http://rainbyte.github.io/posts/200518-01-kotlin-coroutines-android.html</id>
    <published>2020-05-18 05:23:00</published>
    <updated>2020-05-18T05:23:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on May 18, 2020
    
        by rainbyte
    
</div>

<div class="info">
    
        Tags: <a title="All pages tagged &#39;android&#39;." href="/tags/android.html">android</a>, <a title="All pages tagged &#39;async&#39;." href="/tags/async.html">async</a>, <a title="All pages tagged &#39;coroutines&#39;." href="/tags/coroutines.html">coroutines</a>, <a title="All pages tagged &#39;kotlin&#39;." href="/tags/kotlin.html">kotlin</a>
    
</div>

<p>When we need to execute time intensive computations and show some the result
to the user, we should avoid running them inside UI thread, otherwise app UI
could get frozen.</p>
<p>Here we have a detailed example which uses a coroutine to run Fibonacci fib
function without blocking app UI:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode kotlin"><code class="sourceCode kotlin"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> MainActivity <span class="op">:</span> <span class="dt">AppCompatActivity</span><span class="op">(),</span> <span class="dt">CoroutineScope</span> <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Blocking computation, requires too much time to finish</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fun</span> <span class="fu">fib</span><span class="op">(</span><span class="va">x</span><span class="op">:</span> <span class="dt">Int</span><span class="op">):</span> <span class="dt">Int</span> <span class="op">=</span> <span class="cf">if</span> <span class="op">(</span>x <span class="op">&lt;=</span> <span class="dv">1</span><span class="op">)</span> x <span class="cf">else</span> fib<span class="op">(</span>x <span class="op">-</span> <span class="dv">1</span><span class="op">)</span> <span class="op">+</span> fib<span class="op">(</span>x <span class="op">-</span> <span class="dv">2</span><span class="op">)</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Attach coroutines context to activity</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">override</span> <span class="kw">val</span> <span class="va">coroutineContext</span><span class="op">:</span> CoroutineContext <span class="op">=</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>            Dispatchers<span class="op">.</span>Main <span class="op">+</span> SupervisorJob<span class="op">()</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Coroutines should respect activity lifetime</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">override</span> <span class="kw">fun</span> <span class="fu">onDestroy</span><span class="op">()</span> <span class="op">{</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        <span class="kw">super</span><span class="op">.</span>onDestroy<span class="op">()</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        coroutineContext<span class="op">[</span>Job<span class="op">]!!.</span>cancel<span class="op">()</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">override</span> <span class="kw">fun</span> <span class="fu">onCreate</span><span class="op">(</span><span class="va">savedInstanceState</span><span class="op">:</span> <span class="dt">Bundle</span><span class="op">?)</span> <span class="op">{</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>        <span class="kw">super</span><span class="op">.</span>onCreate<span class="op">(</span>savedInstanceState<span class="op">)</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>        setContentView<span class="op">(</span>R<span class="op">.</span>layout<span class="op">.</span>activity_main<span class="op">)</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>        btnCalc<span class="op">.</span>setOnClickListener <span class="op">{</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>            <span class="kw">val</span> <span class="va">number</span><span class="op">:</span> <span class="kw">Int</span> <span class="op">=</span> editNumber<span class="op">.</span>text<span class="op">.</span>toString<span class="op">().</span>toInt<span class="op">()</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>            <span class="co">// Start coroutine on the context attached to activity</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>            <span class="kw">this</span><span class="op">.</span>launch <span class="op">{</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>                <span class="co">// Switch to IO dispatcher to perform blocking computation</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>                <span class="kw">val</span> <span class="va">result</span> <span class="op">=</span> withContext<span class="op">(</span>Dispatchers<span class="op">.</span>IO<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>                    fib<span class="op">(</span>number<span class="op">)</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>result <span class="op">!=</span> <span class="kw">null</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>                    editResult<span class="op">.</span>setText<span class="op">(</span>result<span class="op">.</span>toString<span class="op">())</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>UI code is also provided to complete the example</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode xml"><code class="sourceCode xml"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">&lt;?xml</span><span class="ot"> version=</span><span class="st">&quot;1.0&quot;</span><span class="ot"> encoding=</span><span class="st">&quot;utf-8&quot;</span><span class="fu">?&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>&lt;<span class="kw">LinearLayout</span><span class="ot"> xmlns:android=</span><span class="st">&quot;http://schemas.android.com/apk/res/android&quot;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ot">    xmlns:tools=</span><span class="st">&quot;http://schemas.android.com/tools&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ot">    android:layout_width=</span><span class="st">&quot;match_parent&quot;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ot">    android:layout_height=</span><span class="st">&quot;match_parent&quot;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="ot">    android:orientation=</span><span class="st">&quot;vertical&quot;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="ot">    android:layout_margin=</span><span class="st">&quot;10dp&quot;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="ot">    tools:context=</span><span class="st">&quot;.MainActivity&quot;</span>&gt;</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    &lt;<span class="kw">TextView</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="ot">        android:layout_width=</span><span class="st">&quot;wrap_content&quot;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="ot">        android:layout_height=</span><span class="st">&quot;wrap_content&quot;</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="ot">        android:text=</span><span class="st">&quot;Number&quot;</span> /&gt;</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    &lt;<span class="kw">EditText</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="ot">        android:id=</span><span class="st">&quot;@+id/editNumber&quot;</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="ot">        android:layout_width=</span><span class="st">&quot;match_parent&quot;</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="ot">        android:layout_height=</span><span class="st">&quot;wrap_content&quot;</span> /&gt;</span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>    &lt;<span class="kw">TextView</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a><span class="ot">        android:layout_width=</span><span class="st">&quot;wrap_content&quot;</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a><span class="ot">        android:layout_height=</span><span class="st">&quot;wrap_content&quot;</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="ot">        android:text=</span><span class="st">&quot;Result&quot;</span> /&gt;</span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>    &lt;<span class="kw">EditText</span></span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a><span class="ot">        android:id=</span><span class="st">&quot;@+id/editResult&quot;</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a><span class="ot">        android:layout_width=</span><span class="st">&quot;match_parent&quot;</span></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a><span class="ot">        android:layout_height=</span><span class="st">&quot;wrap_content&quot;</span> /&gt;</span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>    &lt;<span class="kw">Button</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a><span class="ot">        android:id=</span><span class="st">&quot;@+id/btnCalc&quot;</span></span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a><span class="ot">        android:layout_width=</span><span class="st">&quot;wrap_content&quot;</span></span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a><span class="ot">        android:layout_height=</span><span class="st">&quot;wrap_content&quot;</span></span>
<span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a><span class="ot">        android:text=</span><span class="st">&quot;Calculate fib(number)&quot;</span> /&gt;</span>
<span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a>&lt;/<span class="kw">LinearLayout</span>&gt;</span></code></pre></div>


<div id="gh-comments-list">
</div>

<script type="text/javascript">
    // This is a self executing function
    var issueId = 5;
    var url = "https://github.com/rainbyte/rainbyte.github.io/issues/" + issueId;
    var api_url = "https://api.github.com/repos/rainbyte/rainbyte.github.io/issues/" + issueId + "/comments";
    (function() {
        // DOM is already available, now we can handle page elements
        var ghCommentsList = document.getElementById("gh-comments-list");

        var request = new XMLHttpRequest();
        request.open('GET', api_url, true);
        request.onload = function() {
            if (request.status >= 200 && request.status < 400) {
                // Request was successful, we can process the raw comments
                var comments = JSON.parse(request.responseText);
                var fragment = document.createDocumentFragment();
                var range = new Range();

                // Render comments section header
                fragment.appendChild(range.createContextualFragment(`
                    <div>
                        <b>Comments section</b> (visit the <b><a href='${url}'>issue</a></b> of this post to add one)
                    </div>
                `));

                // Render view of each comment
                comments.forEach(comment => {
                    var date = new Date(comment.created_at);
                    var renderedComment = range.createContextualFragment(`
                        <div class='gh-comment'>
                            <div class='gh-comment-header'>
                                <img src='${comment.user.avatar_url}'>
                                <div>
                                    <b><a href='${comment.user.html_url}'>${comment.user.login}</a></b> posted at <em>${date.toDateString()}</em>
                                </div>
                            </div>
                            <div class='gh-comment-body'>
                                ${comment.body}
                            </div>
                        </div>
                    `);
                    fragment.appendChild(renderedComment);
                });

                // Make changes visible by adding rendered nodes
                ghCommentsList.append(fragment);
            } else {
                // Request reached the target server, but it returned an error
                ghCommentsList.append("Comments are not available now.");
            }
        };
        request.onerror = function() {
            // There was a connection error of some sort
            ghCommentsList.append("Comments are not available now.");
        };
        request.send();
    })();
</script>
]]></summary>
</entry>
<entry>
    <title>Plantillas de Gnome</title>
    <link href="http://rainbyte.github.io/posts/191207-01-plantillas.html" />
    <id>http://rainbyte.github.io/posts/191207-01-plantillas.html</id>
    <published>2019-12-07 02:51:00</published>
    <updated>2019-12-07T02:51:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on December  7, 2019
    
        by rainbyte
    
</div>

<div class="info">
    
        Tags: <a title="All pages tagged &#39;gnome&#39;." href="/tags/gnome.html">gnome</a>
    
</div>

<h2 id="plantillas-de-gnome">Plantillas de Gnome</h2>
<p>Gnome posee una carpeta <code>~/Plantillas</code> en la cual es posible agregar archivos como base para crear nuevos documentos de forma autom√°tica.</p>
<p>Muchas veces se da el caso de crear documentos con cierto contenido que se repite en cada uno de ellos, por ejemplo los archivos .desktop:</p>
<pre class="desktop"><code>[Desktop Entry]

Type=Application
Name=Firefox
Exec=/usr/bin/firefox</code></pre>
<p>Como puede verse, estos documentos siempre tienen la misma cabecera y algunas opciones que deben estar all√≠ siempre (ej. <code>Type</code> y <code>Name</code>).</p>
<p>Como soluci√≥n podr√≠amos crear un archivo <code>~/Plantillas/Nuevo Desktop Entry.desktop</code>, para evitar tipear esas cosas, algo asi:</p>
<pre class="desktop"><code>[Desktop Entry]

Type=Application
Name=${nombre}
Exec=${comando}</code></pre>
<p>Luego desde Nautilus podemos hacer click derecho e ir al men√∫ <code>Nuevo documento...</code> y all√≠ ver nuestra plantilla.</p>
<p>Finalmente es cuesti√≥n de cambiar el nombre y rellenar los campos (ej. <code>${nombre}</code> y <code>${comando}</code>).</p>


<div id="gh-comments-list">
</div>

<script type="text/javascript">
    // This is a self executing function
    var issueId = 3;
    var url = "https://github.com/rainbyte/rainbyte.github.io/issues/" + issueId;
    var api_url = "https://api.github.com/repos/rainbyte/rainbyte.github.io/issues/" + issueId + "/comments";
    (function() {
        // DOM is already available, now we can handle page elements
        var ghCommentsList = document.getElementById("gh-comments-list");

        var request = new XMLHttpRequest();
        request.open('GET', api_url, true);
        request.onload = function() {
            if (request.status >= 200 && request.status < 400) {
                // Request was successful, we can process the raw comments
                var comments = JSON.parse(request.responseText);
                var fragment = document.createDocumentFragment();
                var range = new Range();

                // Render comments section header
                fragment.appendChild(range.createContextualFragment(`
                    <div>
                        <b>Comments section</b> (visit the <b><a href='${url}'>issue</a></b> of this post to add one)
                    </div>
                `));

                // Render view of each comment
                comments.forEach(comment => {
                    var date = new Date(comment.created_at);
                    var renderedComment = range.createContextualFragment(`
                        <div class='gh-comment'>
                            <div class='gh-comment-header'>
                                <img src='${comment.user.avatar_url}'>
                                <div>
                                    <b><a href='${comment.user.html_url}'>${comment.user.login}</a></b> posted at <em>${date.toDateString()}</em>
                                </div>
                            </div>
                            <div class='gh-comment-body'>
                                ${comment.body}
                            </div>
                        </div>
                    `);
                    fragment.appendChild(renderedComment);
                });

                // Make changes visible by adding rendered nodes
                ghCommentsList.append(fragment);
            } else {
                // Request reached the target server, but it returned an error
                ghCommentsList.append("Comments are not available now.");
            }
        };
        request.onerror = function() {
            // There was a connection error of some sort
            ghCommentsList.append("Comments are not available now.");
        };
        request.send();
    })();
</script>
]]></summary>
</entry>
<entry>
    <title>Pandoc filter for custom ruby notation</title>
    <link href="http://rainbyte.github.io/posts/181122-01-pandoc-filter-ruby.html" />
    <id>http://rainbyte.github.io/posts/181122-01-pandoc-filter-ruby.html</id>
    <published>2018-11-22 03:12:00</published>
    <updated>2018-11-22T03:12:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on November 22, 2018
    
        by rainbyte
    
</div>

<div class="info">
    
        Tags: <a title="All pages tagged &#39;blog&#39;." href="/tags/blog.html">blog</a>, <a title="All pages tagged &#39;haskell&#39;." href="/tags/haskell.html">haskell</a>, <a title="All pages tagged &#39;pandoc&#39;." href="/tags/pandoc.html">pandoc</a>, <a title="All pages tagged &#39;markdown&#39;." href="/tags/markdown.html">markdown</a>, <a title="All pages tagged &#39;chinese&#39;." href="/tags/chinese.html">chinese</a>, <a title="All pages tagged &#39;japanese&#39;." href="/tags/japanese.html">japanese</a>
    
</div>

<h2 id="the-motivation">The motivation</h2>
<p>Chinese and Japanese languages use ideograms in their written forms, but sometimes it is useful to show the reader how those ideograms should be pronounced. To do that, phonetic systems like <strong><ruby>Ê±âËØ≠<rt>h√†ny«î</rt></ruby><ruby>ÊãºÈü≥<rt>pƒ´nyƒ´n</rt></ruby></strong> and <strong><ruby>ÊåØ<rt>fu</rt>„Çä<rt>ri</rt>‰ªÆ<rt>ga</rt>Âêç<rt>na</rt></ruby></strong> are used.</p>
<p>In html documents we can use <code>ruby</code> elements to show phonetic representation above the ideograms, like in the following example:</p>
<table>
<colgroup>
<col style="width: 21%" />
<col style="width: 78%" />
</colgroup>
<thead>
<tr class="header">
<th>Code</th>
<th>Expected Result</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>ÊàëÂñúÊ¨¢&lt;ruby&gt;Ê±â&lt;rt&gt;h√†n&lt;/rt&gt;Â≠ó&lt;rt&gt;z√¨&lt;/rt&gt;&lt;/ruby&gt;</code></td>
<td>‰∏≠ÂõΩ<ruby>Ê±â<rt>h√†n</rt>Â≠ó<rt>z√¨</rt></ruby></td>
</tr>
</tbody>
</table>
<p>The problem is that writing text using <code>ruby</code> elements it is tedious and error prone. We prefer writing something like the following examples:</p>
<table>
<thead>
<tr class="header">
<th>Code</th>
<th>Expected Result</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>ÊàëÂñúÊ¨¢{Ê±âÂ≠ó|h√†n|z√¨}</code></td>
<td>ÊàëÂñúÊ¨¢<ruby>Ê±â<rt>h√†n</rt>Â≠ó<rt>z√¨</rt></ruby></td>
</tr>
<tr class="even">
<td><code>ÊàëÂñúÊ¨¢{Ê±âÂ≠ó|h√†nz√¨}</code></td>
<td>ÊàëÂñúÊ¨¢<ruby>Ê±âÂ≠ó<rt>h√†nz√¨</rt></ruby></td>
</tr>
<tr class="odd">
<td><code>ÊàëÂñúÊ¨¢{Ê±âÂ≠ó|}</code></td>
<td>ÊàëÂñúÊ¨¢<ruby>Ê±â<rt></rt>Â≠ó<rt></rt></ruby></td>
</tr>
<tr class="even">
<td><code>ÊàëÂñúÊ¨¢{Ê±âÂ≠ó|h√†|n|z√¨}</code></td>
<td>ÊàëÂñúÊ¨¢<ruby>Ê±âÂ≠ó<rt>h√†</td>
</tr>
<tr class="odd">
<td><code>ÊàëÂñúÊ¨¢{Ê±âÂ≠ó}</code></td>
<td>ÊàëÂñúÊ¨¢{Ê±âÂ≠ó}</td>
</tr>
<tr class="even">
<td><code>ÊàëÂñúÊ¨¢{|h√†nz√¨}</code></td>
<td>ÊàëÂñúÊ¨¢<ruby><rt>h√†nz√¨</rt></ruby></td>
</tr>
<tr class="odd">
<td><code>ÊàëÂñúÊ¨¢{|}</code></td>
<td>ÊàëÂñúÊ¨¢</td>
</tr>
</tbody>
</table>
<p>The rest of the post explains how to handle those custom markdown expressions to produce the <code>ruby</code> elements without writing them by hand. I implemented this code in <strong>Haskell</strong> language as a <strong>Pandoc</strong> filter, because this blog uses <strong>Hakyll</strong> static generator which uses the <strong>Pandoc</strong> library.</p>
<h2 id="document-representation">Document representation</h2>
<p>Pandoc uses a custom datatype to represent in an uniform way the multiple types of contents it can handle. That type is called <code>Pandoc</code> and basically contains a tree-like structure formed by different nodes. We are interested in processing only nodes which are specific instances of the <code>Inline</code> type, because they contain the pieces of text we want to modify.</p>
<p>We have a piece of code which process the provided Pandoc data structure.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">transformCustomMarkdownRuby ::</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Pandoc</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>transformCustomMarkdownRuby <span class="ot">=</span> walk handleInline</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ot">    handleInline ::</span> <span class="dt">Inline</span> <span class="ot">-&gt;</span> <span class="dt">Inline</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    handleInline (<span class="dt">Str</span> s) <span class="ot">=</span> <span class="kw">case</span> (parse markdownRuby <span class="st">&quot;&quot;</span> s) <span class="kw">of</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        (<span class="dt">Left</span> _)     <span class="ot">-&gt;</span> <span class="dt">Str</span> s</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        (<span class="dt">Right</span> rubies) <span class="ot">-&gt;</span> <span class="dt">RawInline</span> (<span class="dt">Format</span> <span class="st">&quot;html&quot;</span>) (rubiesToHtml rubies)</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    handleInline x       <span class="ot">=</span> x</span></code></pre></div>
<p>The key point in this code is the pattern matching over the <code>Inline</code> type, specifically over the <code>Str</code> instances. We use the <code>walk</code> function to process all the matched nodes recursively, leaving the other ones untouched. A <code>RawInline</code> instance is generated when ruby tags are found, otherwise the original <code>Str</code> instance is preserved.</p>
<h2 id="text-processing">Text processing</h2>
<p>When we have a candidate to be modified, it is necessary to verify if it follows the correct syntax, so we can parse it to extract the data and render it the way we want.</p>
<p>Now, here we have the code which does main work:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">markdownRuby ::</span> <span class="dt">Parsec</span> <span class="dt">String</span> () [(<span class="dt">String</span>,[(<span class="dt">String</span>,<span class="dt">String</span>)],<span class="dt">String</span>)]</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>markdownRuby <span class="ot">=</span> many <span class="op">$</span> choice [try ruby, fallback]</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ot">    ruby ::</span> <span class="dt">Parsec</span> <span class="dt">String</span> () (<span class="dt">String</span>,[(<span class="dt">String</span>,<span class="dt">String</span>)],<span class="dt">String</span>)</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    ruby <span class="ot">=</span> (,,) <span class="co">-- (openingText,rubyPairs,closingText)</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;$&gt;</span> (many <span class="op">$</span> noneOf <span class="st">&quot;{&quot;</span>)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;*&gt;</span> between (char <span class="ch">&#39;{&#39;</span>) (char <span class="ch">&#39;}&#39;</span>) markdownRubyPairs</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;*&gt;</span> (many <span class="op">$</span> noneOf <span class="st">&quot;{&quot;</span>)</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="ot">    fallback ::</span> <span class="dt">Parsec</span> <span class="dt">String</span> () (<span class="dt">String</span>,[(<span class="dt">String</span>,<span class="dt">String</span>)],<span class="dt">String</span>)</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    fallback <span class="ot">=</span> (,,) <span class="co">-- (openingText,rubyPairs,closingText)</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;$&gt;</span> (many1 <span class="op">$</span> anyChar)</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> []</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;*&gt;</span> <span class="fu">pure</span> <span class="st">&quot;&quot;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="ot">markdownRubyPairs ::</span> <span class="dt">Parsec</span> <span class="dt">String</span> () [(<span class="dt">String</span>,<span class="dt">String</span>)]</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>markdownRubyPairs <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    elems <span class="ot">&lt;-</span> taggedElems</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>    tags  <span class="ot">&lt;-</span> many1 rubyTag</span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> sameLen <span class="ot">=</span> <span class="fu">length</span> elems <span class="op">==</span> <span class="fu">length</span> tags</span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>        matchingPairs <span class="ot">=</span> <span class="fu">zip</span> elems tags</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>        singlePair <span class="ot">=</span> [(<span class="fu">mconcat</span> elems,intercalate <span class="st">&quot;|&quot;</span> tags)]</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> <span class="op">$</span> <span class="kw">if</span> sameLen <span class="kw">then</span> matchingPairs <span class="kw">else</span> singlePair</span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="ot">    taggedElems ::</span> <span class="dt">Parsec</span> <span class="dt">String</span> () [<span class="dt">String</span>]</span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>    taggedElems <span class="ot">=</span> <span class="fu">fmap</span> (<span class="fu">fmap</span> <span class="fu">pure</span>) (many (noneOf <span class="st">&quot;|}&quot;</span>))</span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>    rubyTag <span class="ot">=</span> char <span class="ch">&#39;|&#39;</span> <span class="op">*&gt;</span> (many <span class="op">$</span> noneOf <span class="st">&quot;|}&quot;</span>)</span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a><span class="ot">rubyToHtml ::</span> (<span class="dt">String</span>,[(<span class="dt">String</span>,<span class="dt">String</span>)],<span class="dt">String</span>) <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>rubyToHtml (prev,pairs,next) <span class="ot">=</span> prev <span class="op">&lt;&gt;</span> pairsToHtml pairs <span class="op">&lt;&gt;</span> next </span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a>    pairsToHtml [] <span class="ot">=</span> <span class="st">&quot;&quot;</span></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>    pairsToHtml ps <span class="ot">=</span> (wrap <span class="op">.</span> <span class="fu">mconcat</span> <span class="op">.</span> <span class="fu">fmap</span> pairToHtml) ps</span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>    pairToHtml (<span class="st">&quot;&quot;</span>,<span class="st">&quot;&quot;</span>) <span class="ot">=</span> <span class="st">&quot;&quot;</span></span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>    pairToHtml (<span class="fu">elem</span>,tag) <span class="ot">=</span> <span class="fu">elem</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;&lt;rt&gt;&quot;</span> <span class="op">&lt;&gt;</span> tag <span class="op">&lt;&gt;</span> <span class="st">&quot;&lt;/rt&gt;&quot;</span></span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a>    wrap x <span class="ot">=</span> <span class="st">&quot;&lt;ruby&gt;&quot;</span> <span class="op">&lt;&gt;</span> x <span class="op">&lt;&gt;</span> <span class="st">&quot;&lt;/ruby&gt;&quot;</span></span>
<span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a><span class="ot">rubiesToHtml ::</span> [(<span class="dt">String</span>,[(<span class="dt">String</span>,<span class="dt">String</span>)],<span class="dt">String</span>)] <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a>rubiesToHtml <span class="ot">=</span> <span class="fu">mconcat</span> <span class="op">.</span> <span class="fu">fmap</span> rubyToHtml</span></code></pre></div>
<p>We are using a library called <code>Parsec</code>, which provides us tools to easily handle the parsing. This code uses them to separate the text in 3 parts: the text before our target, the target itself, the text after our target. Because our target should be between braces, we use te <code>between</code> combinator to find it.</p>
<p>When the target is found, its contents are separated into base elements and their respective ruby tags, so they can be grouped into pairs. It is assumed that the number of elements and tags is equal, otherwise we have to merge them into a single pair to preserve this property.</p>
<p>Finally, when we have the independent pieces, we can take and arrange them to render the view in the format we like. Pandoc support many formats, but in this case we are using Html.</p>
<h2 id="some-caveats">Some caveats</h2>
<p>The current code doesn‚Äôt handle some cases well. I‚Äôm still working on it to make it work with markdown tables, formatting inside the tags, and other missing bits.</p>


<div id="gh-comments-list">
</div>

<script type="text/javascript">
    // This is a self executing function
    var issueId = 2;
    var url = "https://github.com/rainbyte/rainbyte.github.io/issues/" + issueId;
    var api_url = "https://api.github.com/repos/rainbyte/rainbyte.github.io/issues/" + issueId + "/comments";
    (function() {
        // DOM is already available, now we can handle page elements
        var ghCommentsList = document.getElementById("gh-comments-list");

        var request = new XMLHttpRequest();
        request.open('GET', api_url, true);
        request.onload = function() {
            if (request.status >= 200 && request.status < 400) {
                // Request was successful, we can process the raw comments
                var comments = JSON.parse(request.responseText);
                var fragment = document.createDocumentFragment();
                var range = new Range();

                // Render comments section header
                fragment.appendChild(range.createContextualFragment(`
                    <div>
                        <b>Comments section</b> (visit the <b><a href='${url}'>issue</a></b> of this post to add one)
                    </div>
                `));

                // Render view of each comment
                comments.forEach(comment => {
                    var date = new Date(comment.created_at);
                    var renderedComment = range.createContextualFragment(`
                        <div class='gh-comment'>
                            <div class='gh-comment-header'>
                                <img src='${comment.user.avatar_url}'>
                                <div>
                                    <b><a href='${comment.user.html_url}'>${comment.user.login}</a></b> posted at <em>${date.toDateString()}</em>
                                </div>
                            </div>
                            <div class='gh-comment-body'>
                                ${comment.body}
                            </div>
                        </div>
                    `);
                    fragment.appendChild(renderedComment);
                });

                // Make changes visible by adding rendered nodes
                ghCommentsList.append(fragment);
            } else {
                // Request reached the target server, but it returned an error
                ghCommentsList.append("Comments are not available now.");
            }
        };
        request.onerror = function() {
            // There was a connection error of some sort
            ghCommentsList.append("Comments are not available now.");
        };
        request.send();
    })();
</script>
]]></summary>
</entry>
<entry>
    <title>Use GitHub API to implement comments feature</title>
    <link href="http://rainbyte.github.io/posts/181113-01-use-github-api-to-implement-comments.html" />
    <id>http://rainbyte.github.io/posts/181113-01-use-github-api-to-implement-comments.html</id>
    <published>2018-11-16 22:48:00</published>
    <updated>2018-11-16T22:48:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on November 16, 2018
    
        by rainbyte
    
</div>

<div class="info">
    
        Tags: <a title="All pages tagged &#39;blog&#39;." href="/tags/blog.html">blog</a>
    
</div>

<p>The comments section of this blog is implemented via standard GitHub issues and given that GitHub provides an API to access the public information of a repository, we can use it. If we have a repository with issues already created, we can access the comments of a certain issue using an URL like this one:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode default"><code class="sourceCode default"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>https://api.github.com/repos/${username}/${repository}/issues/${issueId}/comments</span></code></pre></div>
<p>Using that endpoint the API provides us the comments as a list of Javascript objects, each one being similar to this:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>{</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;body&quot;</span><span class="op">:</span> <span class="st">&quot;comment text&quot;</span><span class="op">,</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;created_at&quot;</span><span class="op">:</span> <span class="st">&quot;when was the comment published&quot;</span><span class="op">,</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;user: {</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;avatar_url&quot;</span><span class="op">:</span> <span class="st">&quot;user image location&quot;</span><span class="op">,</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;html_url&quot;</span><span class="op">:</span> <span class="st">&quot;user profile location&quot;</span><span class="op">,</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;login&quot;</span><span class="op">:</span> <span class="st">&quot;user nickname&quot;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Of course there are much more fields available, but these ones are representative enough and using them we can write some Javascript code to render the comments HTML view. This is the code used in this blog to render comments below:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> issueId <span class="op">=</span> $commentsIssue$<span class="op">;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> url <span class="op">=</span> <span class="st">&quot;https://github.com/rainbyte/rainbyte.github.io/issues/&quot;</span> <span class="op">+</span> issueId<span class="op">;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> api_url <span class="op">=</span> <span class="st">&quot;https://api.github.com/repos/rainbyte/rainbyte.github.io/issues/&quot;</span> <span class="op">+</span> issueId <span class="op">+</span> <span class="st">&quot;/comments&quot;</span><span class="op">;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>(<span class="kw">function</span>() {</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">// DOM is already available, now we can handle page elements</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">var</span> ghCommentsList <span class="op">=</span> <span class="bu">document</span><span class="op">.</span><span class="fu">getElementById</span>(<span class="st">&quot;gh-comments-list&quot;</span>)<span class="op">;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">var</span> request <span class="op">=</span> <span class="kw">new</span> <span class="bu">XMLHttpRequest</span>()<span class="op">;</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    request<span class="op">.</span><span class="fu">open</span>(<span class="st">&#39;GET&#39;</span><span class="op">,</span> api_url<span class="op">,</span> <span class="kw">true</span>)<span class="op">;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    request<span class="op">.</span><span class="at">onload</span> <span class="op">=</span> <span class="kw">function</span>() {</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> (request<span class="op">.</span><span class="at">status</span> <span class="op">&gt;=</span> <span class="dv">200</span> <span class="op">&amp;&amp;</span> request<span class="op">.</span><span class="at">status</span> <span class="op">&lt;</span> <span class="dv">400</span>) {</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>            <span class="co">// Request was successful, we can process the raw comments</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>            <span class="kw">var</span> comments <span class="op">=</span> <span class="bu">JSON</span><span class="op">.</span><span class="fu">parse</span>(request<span class="op">.</span><span class="at">responseText</span>)<span class="op">;</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>            <span class="kw">var</span> fragment <span class="op">=</span> <span class="bu">document</span><span class="op">.</span><span class="fu">createDocumentFragment</span>()<span class="op">;</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>            <span class="kw">var</span> range <span class="op">=</span> <span class="kw">new</span> <span class="bu">Range</span>()<span class="op">;</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>            <span class="co">// Render comments section header</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>            fragment<span class="op">.</span><span class="fu">appendChild</span>(range<span class="op">.</span><span class="fu">createContextualFragment</span>(<span class="vs">`</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="vs">                &lt;div&gt;</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="vs">                    &lt;b&gt;Comments section&lt;/b&gt; (visit the &lt;b&gt;&lt;a href=&#39;</span><span class="sc">${</span>url<span class="sc">}</span><span class="vs">&#39;&gt;issue&lt;/a&gt;&lt;/b&gt; of this post to add one)</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a><span class="vs">                &lt;/div&gt;</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="vs">            `</span>))<span class="op">;</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>            <span class="co">// Render view of each comment</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>            comments<span class="op">.</span><span class="fu">forEach</span>(comment <span class="kw">=&gt;</span> {</span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>                <span class="kw">var</span> date <span class="op">=</span> <span class="kw">new</span> <span class="bu">Date</span>(comment<span class="op">.</span><span class="at">created_at</span>)<span class="op">;</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>                <span class="kw">var</span> renderedComment <span class="op">=</span> range<span class="op">.</span><span class="fu">createContextualFragment</span>(<span class="vs">`</span></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a><span class="vs">                    &lt;div class=&#39;gh-comment&#39;&gt;</span></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a><span class="vs">                        &lt;div class=&#39;gh-comment-header&#39;&gt;</span></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a><span class="vs">                            &lt;img src=&#39;$</span><span class="sc">${</span>comment<span class="op">.</span><span class="at">user</span><span class="op">.</span><span class="at">avatar_url</span><span class="sc">}</span><span class="vs">&#39;&gt;</span></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a><span class="vs">                            &lt;div&gt;</span></span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a><span class="vs">                                &lt;b&gt;&lt;a href=&#39;</span><span class="sc">${</span>comment<span class="op">.</span><span class="at">user</span><span class="op">.</span><span class="at">html_url</span><span class="sc">}</span><span class="vs">&#39;&gt;</span><span class="sc">${</span>comment<span class="op">.</span><span class="at">user</span><span class="op">.</span><span class="at">login</span><span class="sc">}</span><span class="vs">&lt;/a&gt;&lt;/b&gt; posted at &lt;em&gt;</span><span class="sc">${</span>date<span class="op">.</span><span class="fu">toDateString</span>()<span class="sc">}</span><span class="vs">&lt;/em&gt;</span></span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a><span class="vs">                            &lt;/div&gt;</span></span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a><span class="vs">                        &lt;/div&gt;</span></span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a><span class="vs">                        &lt;div class=&#39;gh-comment-body&#39;&gt;</span></span>
<span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a><span class="vs">                            $</span><span class="sc">${</span>comment<span class="op">.</span><span class="at">body</span><span class="sc">}</span></span>
<span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a><span class="vs">                        &lt;/div&gt;</span></span>
<span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a><span class="vs">                    &lt;/div&gt;</span></span>
<span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a><span class="vs">                `</span>)<span class="op">;</span></span>
<span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a>                fragment<span class="op">.</span><span class="fu">appendChild</span>(renderedComment)<span class="op">;</span></span>
<span id="cb3-41"><a href="#cb3-41" aria-hidden="true" tabindex="-1"></a>            })<span class="op">;</span></span>
<span id="cb3-42"><a href="#cb3-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-43"><a href="#cb3-43" aria-hidden="true" tabindex="-1"></a>            <span class="co">// Make changes visible by adding rendered nodes</span></span>
<span id="cb3-44"><a href="#cb3-44" aria-hidden="true" tabindex="-1"></a>            ghCommentsList<span class="op">.</span><span class="fu">append</span>(fragment)<span class="op">;</span></span>
<span id="cb3-45"><a href="#cb3-45" aria-hidden="true" tabindex="-1"></a>        } <span class="cf">else</span> {</span>
<span id="cb3-46"><a href="#cb3-46" aria-hidden="true" tabindex="-1"></a>            <span class="co">// Request reached the target server, but it returned an error</span></span>
<span id="cb3-47"><a href="#cb3-47" aria-hidden="true" tabindex="-1"></a>            ghCommentsList<span class="op">.</span><span class="fu">append</span>(<span class="st">&quot;Comments are not available now.&quot;</span>)<span class="op">;</span></span>
<span id="cb3-48"><a href="#cb3-48" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb3-49"><a href="#cb3-49" aria-hidden="true" tabindex="-1"></a>    }<span class="op">;</span></span>
<span id="cb3-50"><a href="#cb3-50" aria-hidden="true" tabindex="-1"></a>    request<span class="op">.</span><span class="at">onerror</span> <span class="op">=</span> <span class="kw">function</span>() {</span>
<span id="cb3-51"><a href="#cb3-51" aria-hidden="true" tabindex="-1"></a>        <span class="co">// There was a connection error of some sort</span></span>
<span id="cb3-52"><a href="#cb3-52" aria-hidden="true" tabindex="-1"></a>        ghCommentsList<span class="op">.</span><span class="fu">append</span>(<span class="st">&quot;Comments are not available now.&quot;</span>)<span class="op">;</span></span>
<span id="cb3-53"><a href="#cb3-53" aria-hidden="true" tabindex="-1"></a>    }<span class="op">;</span></span>
<span id="cb3-54"><a href="#cb3-54" aria-hidden="true" tabindex="-1"></a>    request<span class="op">.</span><span class="fu">send</span>()<span class="op">;</span></span>
<span id="cb3-55"><a href="#cb3-55" aria-hidden="true" tabindex="-1"></a>})()<span class="op">;</span></span></code></pre></div>
<p>If code is working ok, you can see a comments section under this text and add a new comment following the provided link.</p>


<div id="gh-comments-list">
</div>

<script type="text/javascript">
    // This is a self executing function
    var issueId = 1;
    var url = "https://github.com/rainbyte/rainbyte.github.io/issues/" + issueId;
    var api_url = "https://api.github.com/repos/rainbyte/rainbyte.github.io/issues/" + issueId + "/comments";
    (function() {
        // DOM is already available, now we can handle page elements
        var ghCommentsList = document.getElementById("gh-comments-list");

        var request = new XMLHttpRequest();
        request.open('GET', api_url, true);
        request.onload = function() {
            if (request.status >= 200 && request.status < 400) {
                // Request was successful, we can process the raw comments
                var comments = JSON.parse(request.responseText);
                var fragment = document.createDocumentFragment();
                var range = new Range();

                // Render comments section header
                fragment.appendChild(range.createContextualFragment(`
                    <div>
                        <b>Comments section</b> (visit the <b><a href='${url}'>issue</a></b> of this post to add one)
                    </div>
                `));

                // Render view of each comment
                comments.forEach(comment => {
                    var date = new Date(comment.created_at);
                    var renderedComment = range.createContextualFragment(`
                        <div class='gh-comment'>
                            <div class='gh-comment-header'>
                                <img src='${comment.user.avatar_url}'>
                                <div>
                                    <b><a href='${comment.user.html_url}'>${comment.user.login}</a></b> posted at <em>${date.toDateString()}</em>
                                </div>
                            </div>
                            <div class='gh-comment-body'>
                                ${comment.body}
                            </div>
                        </div>
                    `);
                    fragment.appendChild(renderedComment);
                });

                // Make changes visible by adding rendered nodes
                ghCommentsList.append(fragment);
            } else {
                // Request reached the target server, but it returned an error
                ghCommentsList.append("Comments are not available now.");
            }
        };
        request.onerror = function() {
            // There was a connection error of some sort
            ghCommentsList.append("Comments are not available now.");
        };
        request.send();
    })();
</script>
]]></summary>
</entry>

</feed>
